// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Conference.Specflow.Features.Conference.DiscountsConfiguration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PromotionalCodesConfigurationScenariosForCreatingAndEditingPromotionalCodesSettingsFeature : Xunit.IUseFixture<PromotionalCodesConfigurationScenariosForCreatingAndEditingPromotionalCodesSettingsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Discounts Configuration.feature"
#line hidden
        
        public PromotionalCodesConfigurationScenariosForCreatingAndEditingPromotionalCodesSettingsFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Promotional Codes Configuration scenarios for creating and editing Promotional Co" +
                    "des settings", "In order to create or update a Promotional Code\r\nAs a Business Customer\r\nI want t" +
                    "o be able to create or update a Promotional Code and set its properties", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Promotional Code",
                        "Discount",
                        "Quota",
                        "Scope",
                        "Cumulative"});
            table1.AddRow(new string[] {
                        "SPEAKER123",
                        "100%",
                        "Unlimited",
                        "All",
                        ""});
#line 7
testRunner.Given("the Promotional Codes", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quota"});
            table2.AddRow(new string[] {
                        "General admission",
                        "500"});
            table2.AddRow(new string[] {
                        "Pre-con Workshop with Greg Young",
                        "100"});
            table2.AddRow(new string[] {
                        "Additional cocktail party",
                        "600"});
#line 10
testRunner.And("the Seat Types configuration", ((string)(null)), table2);
#line hidden
        }
        
        public virtual void SetFixture(PromotionalCodesConfigurationScenariosForCreatingAndEditingPromotionalCodesSettingsFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Promotional Codes Configuration scenarios for creating and editing Promotional Co" +
            "des settings")]
        [Xunit.TraitAttribute("Description", "Create a new Promotional Code")]
        public virtual void CreateANewPromotionalCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new Promotional Code", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 20
testRunner.Given("the Business Customer selects \'Add new Promotional code\' option");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Discount",
                        "Quota",
                        "Scope",
                        "Cumulative"});
            table3.AddRow(new string[] {
                        "10%",
                        "Unlimited",
                        "General admission",
                        "SPEAKER123"});
#line 21
testRunner.And("the Business Customer enter the \'NEWCODE\' Promotional Code and these attributes", ((string)(null)), table3);
#line 24
testRunner.When("the \'Save\' option is selected");
#line 25
testRunner.Then("the new Promotional Code is added to the list of existing codes");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Promotional Codes Configuration scenarios for creating and editing Promotional Co" +
            "des settings")]
        [Xunit.TraitAttribute("Description", "Create a new Promotional Code with with exceeding quota")]
        public virtual void CreateANewPromotionalCodeWithWithExceedingQuota()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new Promotional Code with with exceeding quota", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 30
testRunner.Given("the Business Customer selects \'Add new Promotional code\' option");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Discount",
                        "Quota",
                        "Scope",
                        "Cumulative"});
            table4.AddRow(new string[] {
                        "10%",
                        "1000",
                        "General admission",
                        "SPEAKER123"});
#line 31
testRunner.And("the Business Customer enter the \'NEWCODE\' Promotional Code and these attributes", ((string)(null)), table4);
#line 34
testRunner.When("the \'Save\' option is selected");
#line 35
testRunner.Then("an error message will show up describing that the quota value exceeds the total s" +
                    "eats for the specified Seat Type");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Promotional Codes Configuration scenarios for creating and editing Promotional Co" +
            "des settings")]
        [Xunit.TraitAttribute("Description", "Update an existing Promotional Code")]
        public virtual void UpdateAnExistingPromotionalCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an existing Promotional Code", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 40
testRunner.Given("the Business Customer selects \'SPEAKER123\' Promotional Code");
#line 41
testRunner.And("the Scope is updated with value \'Pre-con Workshop with Greg Young\'");
#line 42
testRunner.And("the Quota is updated with the value \'50\'");
#line 43
testRunner.When("the \'Save\' option is selected");
#line 44
testRunner.Then("updated values are reflected in the selected Promotional Code");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Promotional Codes Configuration scenarios for creating and editing Promotional Co" +
            "des settings")]
        [Xunit.TraitAttribute("Description", "Update an existing Promotional Code with exceeding quota")]
        public virtual void UpdateAnExistingPromotionalCodeWithExceedingQuota()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an existing Promotional Code with exceeding quota", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 49
testRunner.Given("the Business Customer selects \'SPEAKER123\' Promotional Code");
#line 50
testRunner.And("the Scope is updated with value \'Pre-con Workshop with Greg Young\'");
#line 51
testRunner.And("the Quota is updated with the value \'200\'");
#line 52
testRunner.When("the \'Save\' option is selected");
#line 53
testRunner.Then("an error message will show up describing that the quota value exceeds the total s" +
                    "eats for the specified Seat Type");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PromotionalCodesConfigurationScenariosForCreatingAndEditingPromotionalCodesSettingsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PromotionalCodesConfigurationScenariosForCreatingAndEditingPromotionalCodesSettingsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
